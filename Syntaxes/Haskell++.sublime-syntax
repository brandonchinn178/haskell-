%YAML 1.2
---
name: Haskell++
file_extensions: [hs]
scope: source.haskell

variables:
  # Identifiers and Operators
  # https://www.haskell.org/onlinereport/lexemes.html#sect2.4
  lower_ident: '[a-z][\w'']*'
  upper_ident: '[A-Z][\w'']*'
  operator: '(?!:)[!#$%&*+./<=>?@\^|-~:]+'

contexts:
  prototype:
    - include: comments

  main:
    - include: imports

  ### Identifiers ###

  module_name:
    - match: '({{upper_ident}}\.)*({{upper_ident}})'
      scope: entity.name.namespace.haskell

  ### Comments ###

  comments:
    - include: pragmas
    - include: comments-line
    - include: comments-block

  comments-line:
    - match: --
      scope: punctuation.definition.comment
      push: comments-line-body

  comments-line-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.haskell
    - match: \n
      pop: true

  pragmas:
    - match: '{-#'
      scope: punctuation.definition.comment
      push: pragmas-body

  pragmas-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.pragma.haskell
    - match: '#-}'
      scope: punctuation.definition.comment
      pop: true
    - match: (?i)ANN
      scope: keyword.other.pragma.haskell
      embed: pragmas-annotation
      escape: '(?=#-})'
    - match: |-
        (?ix)
            LANGUAGE
          | OPTIONS_GHC
          | INCLUDE
          | WARNING
          | DEPRECATED
          | MINIMAL
          | INLINE
          | NOINLINE
          | INLINABLE
          | CONLIKE
          | LINE
          | COLUMN
          | RULES
          | SPECIALIZE
          | SPECIALICE
          | UNPACK
          | NOUNPACK
          | SOURCE
          | COMPLETE
          | OVERLAPPING
          | OVERLAPPABLE
          | OVERLAPS
          | INCOHERENT
      scope: keyword.other.pragma.haskell

  pragmas-annotation:
    - match: \b(type|module)\b
      scope: keyword.other.annotation.haskell
    - include: expressions

  comments-block:
    - match: '{-'
      scope: punctuation.definition.comment
      push: comments-block-body

  comments-block-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.haskell
    - match: '{-'
      push: comments-block-body
    - match: '-}'
      scope: punctuation.definition.comment
      pop: true

  ### Imports ###

  imports:
    - match: ^(\s*)(import)\b
      captures:
        2: keyword.control.import.haskell
      push: imports-line

  imports-line:
    - meta_scope: meta.import.haskell
    - match: '^(?!\1\s)'
      pop: true
    - match: \b(qualified|as|hiding)\b
      scope: keyword.control.import.modifiers.haskell
    - include: module_name
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: imports-list

  # import UnliftIO (UnliftIO, withRunInIO)
  #                  ^^^^^^^^^^^^^^^^^^^^^
  imports-list:
    - match: \)
      scope: punctuation.section.parens.end.haskell
      pop: true
    - match: \b(type|pattern)\b
      scope: keyword.other.import.haskell
    - # explicitly check for `(..)`
      match: |-
        (?x)
          (\()
          (\.\.)
          (\))
      scope: meta.import.type-members.haskell
      captures:
        1: punctuation.section.parens.begin.haskell
        2: keyword.operator.import.wildcard.haskell
        3: punctuation.section.parens.end.haskell
    - match: \({{operator}}\)
      scope: variable.other.import.operator.haskell
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: imports-list-type-members
    - include: imports-list-common

  # import GHC.Exts (IsList (Item, fromList))
  #                          ^^^^^^^^^^^^^^
  imports-list-type-members:
    - meta_scope: meta.import.type-members.haskell
    - match: \)
      scope: punctuation.section.parens.end.haskell
      pop: true
    - include: imports-list-common
    - match: \(:{{operator}}\)
      scope: variable.other.import.operator.haskell

  imports-list-common:
    - match: '{{upper_ident}}'
      scope: variable.other.import.type.haskell
    - match: '{{lower_ident}}'
      scope: variable.other.import.function.haskell
    - match: ','
      scope: punctuation.separator.haskell

  ### Expressions ###

  expressions:
    - match: '{{lower_ident}}'
      scope: variable.other.function.haskell
    - match: '{{upper_ident}}'
      scope: variable.other.type.haskell
    - match: '"'
      push: expressions-string-body

  expressions-string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.haskell
    - match: '"'
      pop: true
