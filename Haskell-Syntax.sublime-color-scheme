{
  "name": "Haskell Syntax",
  "variables": {
    // grayscale colors
    "black": "#2b2a27",
    "gray": "#7f7f7f",
    "white": "#ede0ce",

    // color names
    "blue": "#729dda",
    "brown": "#bf8040",
    "cyan": "#2fbfbf",
    "gold": "#bfa72f",
    "green": "#8dbc2f",
    "magenta": "#d78fef",
    "olive": "#b1bf6a",
    "orange": "#ff6600",
    "orange_light": "#eea343",
    "periwinkle": "#c6b3ff",
    "purple": "#bf5fbf",
    "red": "#dd573c",
    "salmon": "#ffb399",
    "teal": "#5EBC7D",
    "yellow": "#ffd866",

    // semantic colors
    "comment": "var(gray)",
    "constant": "var(blue)",
    "constructor": "var(teal)",
    "constructor_record_field": "var(orange_light)",
    "error": "var(orange)",
    "import_type_members_punctuation": "var(green)",
    "invalid": "var(red)",
    "forall": "var(brown)",
    "keyword": "var(red)",
    "keyword_annotation": "color(var(keyword) blend(var(pragma) 50%))",
    "keyword_import": "color(var(keyword) blend(var(module) 50%))",
    "keyword_pattern": "var(purple)",
    "list": "var(gold)",
    "list_type": "var(brown)",
    "module": "var(gold)",
    "operator": "var(green)",
    "parameter_type": "var(blue)",
    "pragma": "var(magenta)",
    "quasiquote_marker": "var(salmon)",
    "string": "var(purple)",
    "th_splice": "var(red)",
    "type": "var(cyan)",
    "type_operator": "var(periwinkle)",
    "variable": "var(green)",
  },
  "globals": {
    "background": "var(black)",
    "foreground": "var(white)",
    "caret": "var(white)",
    "line_highlight": "color(var(white) alpha(0.1))",

    // Diff
    "line_diff_added": "var(green)",
    "line_diff_modified": "var(yellow)",
    "line_diff_deleted": "var(red)",

    // Selection
    "selection": "var(red)",
    "selection_foreground": "var(white)",
    "selection_border": "var(black)",
  },
  "rules": [
    // Top-level
    { "scope": "comment", "foreground": "var(comment)" },
    { "scope": "keyword", "foreground": "var(keyword)" },
    { "scope": "keyword.operator", "foreground": "var(operator)" },
    { "scope": "entity", "foreground": "var(variable)" },
    { "scope": "storage", "foreground": "var(type)" },
    { "scope": "string", "foreground": "var(string)" },
    { "scope": "constant", "foreground": "var(constant)" },
    { "scope": "invalid", "foreground": "var(invalid)" },

    // Pragmas
    {
      "scope": "comment.block.pragma",
      "foreground": "var(pragma)",
    },
    {
      "scope": "keyword.other.annotation",
      "foreground": "var(keyword_annotation)",
    },
    {
      "scope": "meta.annotation variable",
      "foreground": "var(variable)",
    },

    // Imports + exports
    {
      "scope": "(meta.import, meta.declaration.module) & keyword",
      "foreground": "var(keyword_import)",
    },
    {
      "scope": "keyword.other.import, keyword.other.export",
      "font_style": "italic",
    },
    {
      "scope": "(meta.import, meta.declaration.module) & punctuation - comment",
      "foreground": "var(module)",
    },
    {
      "scope": "(meta.import, meta.declaration.module) & variable",
      "foreground": "var(variable)",
    },
    {
      "scope": "(meta.import, meta.declaration.module) & keyword.operator.type",
      "foreground": "var(type_operator)",
    },
    {
      "scope": "(meta.import.type_members, meta.export.type_members) & (punctuation - comment, keyword.other.wildcard)",
      "foreground": "var(import_type_members_punctuation)",
    },
    {
      "scope": "(meta.import.type_members, meta.export.type_members) & (storage, keyword.operator.constructor)",
      "foreground": "var(constructor)",
    },

    // Modules
    {
      "scope": "storage.module, entity.name.namespace",
      "foreground": "var(module)",
    },

    // Expressions
    {
      "scope": "variable.function.constructor, keyword.operator.constructor.prefix, variable.function.pattern",
      "foreground": "var(constructor)",
    },
    {
      "scope": "variable.other.constant.name",
      "foreground": "var(constant)",
    },
    {
      "scope": "variable.other.constant.name.constructor",
      "foreground": "var(constructor)",
    },
    {
      "scope": "variable.other.constant.name.type",
      "foreground": "var(type)",
    },
    {
      "scope": "variable.other.error",
      "foreground": "var(error)",
      "font_style": "glow italic",
    },
    {
      "scope": "variable.other.infix",
      "foreground": "var(operator)",
    },
    {
      "scope": "punctuation.section.th_splice",
      "foreground": "var(th_splice)",
    },
    {
      "scope": "punctuation.section.list, punctuation.separator.list",
      "foreground": "var(list)",
    },
    {
      "scope": "punctuation.section.quasiquote",
      "foreground": "var(quasiquote_marker)",
    },

    // Functions
    {
      "scope": "meta.function.parameters variable.other.member",
      "foreground": "var(constructor_record_field)",
    },
    {
      "scope": "variable.function.signature",
      "foreground": "var(variable)",
    },

    // Pattern matching
    {
      "scope": "meta.pattern & (variable.other.constructor, keyword.operator.constructor)",
      "foreground": "var(constructor)",
    },
    {
      "scope": "meta.pattern.record punctuation - comment",
      "foreground": "var(constructor)",
    },
    {
      "scope": "meta.pattern & (keyword.other.wildcard, keyword.other.as_pattern)",
      "foreground": "var(keyword_pattern)",
    },
    {
      "scope": "keyword.other.wildcard.record",
      "foreground": "var(constructor_record_field)",
    },

    // Data types
    {
      "scope": "meta.datatype.record variable.other.member",
      "foreground": "var(constructor_record_field)",
    },
    {
      "scope": "entity.name.constructor",
      "foreground": "var(constructor)",
    },
    {
      "scope": "punctuation.section.record, punctuation.separator.record",
      "foreground": "var(constructor)",
    },

    // Types
    {
      "scope": "variable.other.type",
      "foreground": "var(parameter_type)",
    },
    {
      "scope": "keyword.other.type, punctuation.separator.type",
      "foreground": "var(list_type)",
    },
    {
      "scope": "keyword.control.forall",
      "foreground": "var(forall)",
    },
  ],
}
