-- SYNTAX TEST "Haskell-Syntax.sublime-syntax"

-- TODO: remove when top-level expressions are allowed
foo = do
  makeLenses ''Foo
--^^^^^^^^^^ variable.other.haskell
--           ^^^^^ variable.other.constructor.haskell

  makeLenses ''Foo.Bar
--           ^^^^^^^^^ variable.other.constructor.haskell

  let r = Record
        { a = 1
        , b = 2
        }

  let x = Text.unpack foo
      y = 1
  x <> show y
--  ^^ keyword.operator.haskell

  a == b
--  ^^ keyword.operator.haskell

  a Prelude.== b
--  ^^^^^^^^^^ keyword.operator.haskell

  (==) a b
--^^^^ keyword.operator.prefix.haskell
  (Prelude.==) a b
--^^^^^^^^^^^^ keyword.operator.prefix.haskell

  asdf @?= sdaofi
--     ^^^ keyword.operator.haskell

  a && b
--  ^^ keyword.operator.haskell
  a || b
--  ^^ keyword.operator.haskell
  a ^ b
--  ^ keyword.operator.haskell
  a !! b
--  ^^ keyword.operator.haskell
  a ?! b
--  ^^ keyword.operator.haskell
  a ~~ b
--  ^^ keyword.operator.haskell
  a . b . c . d $ x
--  ^ keyword.operator.haskell
--      ^ keyword.operator.haskell
--          ^ keyword.operator.haskell
--              ^ keyword.operator.haskell

  let a = (10 :: Int)
--^^^ keyword.control.haskell
--    ^ variable.other.haskell
--      ^ keyword.operator.haskell

  let a = \x -> asdf in a True

  alet + letA + in' + in2
--^^^^ variable.other.haskell
--       ^^^^ variable.other.haskell
--              ^^^ variable.other.haskell
--                    ^^^ variable.other.haskell

  if a then b else c
--^^ keyword.control.haskell
--     ^^^^ keyword.control.haskell
--            ^^^^ keyword.control.haskell

  error $ "This is an error: " ++ show a
--^^^^^ variable.other.error.haskell
  undefined
--^^^^^^^^^ variable.other.error.haskell

  case x of
--^^^^ keyword.control.haskell
--       ^^ keyword.control.haskell
    (a, b) -> undefined
    Just b -> undefined
    _ -> undefined

  10000
--^^^^^ constant.numeric.integer.decimal.haskell
  0b01
--^^^^ constant.numeric.integer.binary.haskell
  0o01234567
--^^^^^^^^^^ constant.numeric.integer.octal.haskell
  0x0123456789abcdef
--^^^^^^^^^^^^^^^^^^ constant.numeric.integer.hexadecimal.haskell
  0.123
--^^^^^ constant.numeric.float.haskell
  -1230.23
--^^^^^^^^ constant.numeric.float.haskell
  123
--^^^ constant.numeric.integer.decimal.haskell
  1e-20
--^^^^^ constant.numeric.float.haskell
  1.5e20
--^^^^^^ constant.numeric.float.haskell

  a `foo` b
--  ^^^^^ variable.other.infix.haskell
  a `Foo` b
--  ^^^^^ variable.function.constructor.infix.haskell
  a `Foo.Bar` b
--  ^^^^^^^^^ variable.function.constructor.infix.haskell
  a `Foo.bar` b
--  ^^^^^^^^^ variable.other.infix.haskell
  (`runReaderT` env) . unFoo $ m
  a : b
--  ^ keyword.operator.constructor.haskell
  a :| []
--  ^^ keyword.operator.constructor.haskell
  a NonEmpty.:| []
--  ^^^^^^^^^^^ keyword.operator.constructor.haskell
  (:|) a []
--^^^^ keyword.operator.constructor.prefix.haskell
  (NonEmpty.:|) a []
--^^^^^^^^^^^^^ keyword.operator.constructor.prefix.haskell

  (,) 1 2
--^^^ keyword.operator.constructor.prefix.haskell
  (,,) <$> Just 1 <*> Nothing <*> Nothing
--^^^^ keyword.operator.constructor.prefix.haskell
  pure ()
--     ^^ keyword.operator.constructor.prefix.haskell

  -- works for unspaced expressions
  a-1
--^ variable.other.haskell
-- ^ keyword.operator.haskell
--  ^ constant.numeric.integer.decimal.haskell
  100+100
--^^^ constant.numeric.integer.decimal.haskell
--   ^ keyword.operator.haskell
--    ^^^ constant.numeric.integer.decimal.haskell

  Just 10 >>= Just . (* 10) >> Nothing
--^^^^ variable.function.constructor.haskell
--        ^^^ keyword.operator.haskell
--            ^^^^ variable.function.constructor.haskell
--                          ^^ keyword.operator.haskell
--                             ^^^^^^^ variable.function.constructor.haskell

  ['a', 'b', '\n', '\o123', '\x123abc']
-- ^^^ string.quoted.single.haskell
--      ^^^ string.quoted.single.haskell
--           ^^^^ string.quoted.single.haskell
--                 ^^^^^^^ string.quoted.single.haskell
--                          ^^^^^^^^^^ string.quoted.single.haskell

  "hello " ++ "world " <> "other"
--^^^^^^^^ string.quoted.double.haskell
--            ^^^^^^^^ string.quoted.double.haskell
--                        ^^^^^^^ string.quoted.double.haskell

  (1, 2, "asdf")
--^ punctuation.section.tuple.begin.haskell
--  ^ punctuation.separator.tuple.haskell
--     ^ punctuation.separator.tuple.haskell
--             ^ punctuation.section.tuple.end.haskell

  []
--^ punctuation.section.list.begin.haskell
-- ^ punctuation.section.list.end.haskell
  [1, 2, 3]
--^ punctuation.section.list.begin.haskell
-- ^ constant.numeric.integer.decimal.haskell
--  ^ punctuation.separator.list.haskell
--    ^ constant.numeric.integer.decimal.haskell
--     ^ punctuation.separator.list.haskell
--       ^ constant.numeric.integer.decimal.haskell
--        ^ punctuation.section.list.end.haskell
  [ [1, 2], [3] ]
--^ punctuation.section.list.begin.haskell
--  ^ punctuation.section.list.begin.haskell
--    ^ punctuation.separator.list.haskell
--       ^ punctuation.section.list.end.haskell
--        ^ punctuation.separator.list.haskell
--          ^ punctuation.section.list.begin.haskell
--            ^ punctuation.section.list.end.haskell
--              ^ punctuation.section.list.end.haskell
  [(x, x + 1) | x <- [0..10], x > 2]
--^ punctuation.section.list.begin.haskell
-- ^ punctuation.section.tuple.begin.haskell
--  ^ variable.other.haskell
--   ^ punctuation.separator.tuple.haskell
--          ^ punctuation.section.tuple.end.haskell
--                   ^ punctuation.section.list.begin.haskell
--                         ^ punctuation.section.list.end.haskell
--                                 ^ punctuation.section.list.end.haskell
  [ (x * 10, y)
  | Just x <- xs
  , let y = 2
  , x + y > 20
  ]

  "a -- b"
--^^^^^^^^ string.quoted.double.haskell

  [ a -- asdf
--    ^^^^^^^ comment.line.haskell
  , "a -- b"
--  ^^^^^^^^ string.quoted.double.haskell
  ]

  ( a -- asdf
--    ^^^^^^^ comment.line.haskell
  , b -- asdf
--    ^^^^^^^ comment.line.haskell
  )

  [|["a", 3, 12.1, False] ++ $(other)|]
--^^ punctuation.section.quasiquote.template_haskell.begin.haskell
--  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.template_haskell.haskell
--  ^ punctuation.section.list.begin.haskell
--   ^^^ string.quoted.double.haskell
--                                   ^^ punctuation.section.quasiquote.template_haskell.end.haskell
  [e|["a", 3, 12.1, False] ++ $(other)|]
--^^^ punctuation.section.quasiquote.template_haskell.begin.haskell
--                                    ^^ punctuation.section.quasiquote.template_haskell.end.haskell
  [d| asdf |]
  [text| asdf -- basdf |]
--      ^^^^^^^^^^^^^^^ string.quoted.quasiquote.haskell
  [text| asdf |]
--^^^^^^ punctuation.section.quasiquote.begin.haskell
--      ^^^^^^ string.quoted.quasiquote.haskell
--            ^^ punctuation.section.quasiquote.end.haskell
  [Foo.text| asdf |]
--^^^^^^^^^^ punctuation.section.quasiquote.begin.haskell
--          ^^^^^^ string.quoted.quasiquote.haskell
--                ^^ punctuation.section.quasiquote.end.haskell

  do { a <- pure 1; return a }
--^^ keyword.control.haskell
  do { rec { a <- pure b; b <- pure 1; return a } }
--     ^^^ keyword.control.extension_dependent.haskell
  mdo { a <- pure b; b <- pure 1; return a }
--^^^ keyword.control.extension_dependent.haskell
