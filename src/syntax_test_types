-- SYNTAX TEST "Haskell-Syntax.sublime-syntax"

   type String = [Char]
-- ^^^^ keyword.control.type.haskell
--      ^^^^^^
--             ^ keyword.control.definition.haskell
--               ^ punctuation.section.brackets.begin.haskell keyword.other.type.haskell
--                ^^^^ storage.type.haskell
--                    ^ punctuation.section.brackets.end.haskell keyword.other.type.haskell

type URL = (Network.HTTP.URI, Bool)
--         ^ punctuation.section.parens.begin.haskell keyword.other.type.haskell
--          ^^^^^^^^^^^^^ storage.module.haskell
--                       ^^^ storage.type.haskell
--                          ^ punctuation.separator.type.tuple.haskell
--                            ^^^^ storage.type.haskell
--                                ^ punctuation.section.parens.end.haskell keyword.other.type.haskell

type Showable = forall a. Show a => a
--              ^^^^^^ keyword.control.forall.haskell
--                     ^ variable.other.type.haskell
--                      ^ keyword.control.forall.haskell
--                        ^^^^ storage.type.haskell
--                             ^ variable.other.type.haskell
--                               ^^ keyword.operator.type.haskell
--                                  ^ variable.other.type.haskell

type Fooable = forall (a :: k) (b :: Bool). Foo a b
--                    ^ punctuation.section.parens.begin.haskell
--                     ^ variable.other.type.haskell
--                       ^^ keyword.control.kind_annotation.haskell
--                          ^ variable.other.type.haskell
--                           ^ punctuation.section.parens.end.haskell
--                             ^ punctuation.section.parens.begin.haskell
--                              ^ variable.other.type.haskell
--                                ^^ keyword.control.kind_annotation.haskell
--                                   ^^^^ storage.type.haskell
--                                       ^ punctuation.section.parens.end.haskell

type ListKind = '[Int, Double, Bool]
--              ^^ punctuation.section.brackets.begin.haskell keyword.other.type.haskell
--                   ^ punctuation.separator.type.list.haskell
--                           ^ punctuation.separator.type.list.haskell
--                                 ^ punctuation.section.brackets.end.haskell keyword.other.type.haskell

type TupleKind = '(Int, Double)
--               ^^ punctuation.section.parens.begin.haskell keyword.other.type.haskell
--                    ^ punctuation.separator.type.tuple.haskell
--                            ^ punctuation.section.parens.end.haskell keyword.other.type.haskell

type Foo forall' = Int
--       ^^^^^^^ variable.other.type.haskell

-- TODO: symbols + type operators
type ServantRoute = Capture "userId" Int :> Get '[JSON] User
