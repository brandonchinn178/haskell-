%YAML 1.2
---
name: Haskell Syntax
file_extensions: [hs]
scope: source.haskell

variables:
  # Identifiers and Operators
  # https://www.haskell.org/onlinereport/lexemes.html#sect2.4
  post_non_ident: |-
    (?=[^\w'])
  lower_ident: |-
    \b[a-z_][\w']*{{magic_hash}}{{post_non_ident}}
  upper_ident: |-
    \b[A-Z][\w']*{{magic_hash}}{{post_non_ident}}
  symbol_char: '[!#$%&*+./<=>?@\\^|\-~:]'
  operator: '(?!:){{symbol_char}}+'
  operator_con: ':{{symbol_char}}*'
  # -XMagicHash
  magic_hash: '#?'

  module_prefix: '({{upper_ident}}\.)*'

contexts:
  prototype:
    - include: comment
    - include: cpp

  main:
    - include: module_header
    - include: import
    - include: data_type
    - include: type_class
    - include: function

  ### Utilities ###

  pop_when_deindent:
    - match: '^(?!\1\s)'
      pop: true

  ### Comments ###

  comment:
    - include: pragma
    - include: comment_line
    - include: comment_block

  comment_line:
    - match: --+(?=[\sa-zA-Z_'])
      scope: punctuation.definition.comment
      push: comment_line_body

  comment_line_body:
    - meta_include_prototype: false
    - meta_scope: comment.line.haskell
    - match: \n
      pop: true

  pragma:
    - match: '{-#'
      scope: punctuation.definition.comment
      push: pragma_body

  pragma_body:
    - meta_include_prototype: false
    - meta_scope: comment.block.pragma.haskell
    - match: '#-}'
      scope: punctuation.definition.comment
      pop: true
    - match: (?i)ANN
      scope: keyword.other.pragma.haskell
      push: pragmas_annotation
    - match: |-
        (?ix)
            LANGUAGE
          | OPTIONS_GHC
          | INCLUDE
          | WARNING
          | DEPRECATED
          | MINIMAL
          | INLINE
          | NOINLINE
          | INLINABLE
          | CONLIKE
          | LINE
          | COLUMN
          | RULES
          | SPECIALIZE
          | SPECIALICE
          | UNPACK
          | NOUNPACK
          | SOURCE
          | COMPLETE
          | OVERLAPPING
          | OVERLAPPABLE
          | OVERLAPS
          | INCOHERENT
      scope: keyword.other.pragma.haskell

  pragmas_annotation:
    - clear_scopes: true
    - meta_scope: meta.annotation.haskell
    - match: '(?=#-})'
      pop: true
    - match: \b(type|module){{post_non_ident}}
      scope: keyword.other.annotation.haskell
    - include: expression

  comment_block:
    - match: '{-'
      scope: punctuation.definition.comment
      push: comment_block_body

  comment_block_body:
    - meta_include_prototype: false
    - meta_scope: comment.block.haskell
    - match: '{-'
      push: comment_block_body
    - match: '-}'
      scope: punctuation.definition.comment
      pop: true

  ### Module header ##

  module_header:
    - match: ^({{INDENTATION}})(module){{post_non_ident}}
      captures:
        2: keyword.declaration.namespace.haskell
      push: module_header_line

  module_header_line:
    - meta_scope: meta.declaration.module.haskell
    - match: '{{module_prefix}}({{upper_ident}})'
      scope: entity.name.namespace.haskell
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: module_header_exports_list
    - match: \b(where)\b
      scope: keyword.control.context.haskell
      pop: true

  module_header_exports_list:
    - meta_scope: meta.declaration.exports.haskell
    - match: \)
      scope: punctuation.section.parens.end.haskell
      pop: true
    - match: \b(type) (\({{operator}}\))
      captures:
        1: keyword.other.export.haskell
        2: keyword.operator.type.haskell
    - match: \b(pattern) ({{upper_ident}})
      captures:
        1: keyword.other.export.haskell
        2: variable.function.pattern.haskell
    - match: \b(module) ({{module_prefix}}{{upper_ident}})
      captures:
        1: keyword.other.export.haskell
        2: storage.module.haskell
    - # explicitly check for `(..)`
      match: |-
        (?x)
          (\()
          (\.\.)
          (\))
      scope: meta.export.type_members.haskell
      captures:
        1: punctuation.section.parens.begin.haskell
        2: keyword.other.wildcard.export.haskell
        3: punctuation.section.parens.end.haskell
    - match: \({{operator}}\)
      scope: keyword.operator.haskell
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: import_list_type_members
    - match: '({{module_prefix}})({{lower_ident}})'
      captures:
        1: storage.module.haskell
        3: variable.function.haskell
    - match: '({{module_prefix}})({{upper_ident}})'
      captures:
        1: storage.module.haskell
        3: storage.type.haskell
    - match: ','
      scope: punctuation.separator.haskell

  ### Imports ###

  import:
    - match: ^({{INDENTATION}})(import){{post_non_ident}}
      captures:
        2: keyword.control.import.haskell
      push: import_line

  import_line:
    - meta_scope: meta.import.haskell
    - include: pop_when_deindent
    - match: \b(qualified|as|hiding)\b
      scope: keyword.control.import.modifiers.haskell
    - match: '{{module_prefix}}({{upper_ident}})'
      scope: storage.module.haskell
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: import_list

  # import UnliftIO (UnliftIO, withRunInIO)
  #                  ^^^^^^^^^^^^^^^^^^^^^
  import_list:
    - meta_scope: meta.declaration.imports.haskell
    - match: \)
      scope: punctuation.section.parens.end.haskell
      pop: true
    - match: \b(type) (\({{operator}}\))
      captures:
        1: keyword.other.import.haskell
        2: keyword.operator.type.haskell
    - match: \b(pattern) ({{upper_ident}})
      captures:
        1: keyword.other.import.haskell
        2: variable.function.pattern.haskell
    - # explicitly check for `(..)`
      match: |-
        (?x)
          (\()
          (\.\.)
          (\))
      scope: meta.import.type_members.haskell
      captures:
        1: punctuation.section.parens.begin.haskell
        2: keyword.other.wildcard.import.haskell
        3: punctuation.section.parens.end.haskell
    - match: \({{operator}}\)
      scope: keyword.operator.haskell
    - match: \(
      scope: punctuation.section.parens.begin.haskell
      push: import_list_type_members
    - match: '{{upper_ident}}'
      scope: storage.type.haskell
    - match: '{{lower_ident}}'
      scope: variable.function.haskell
    - match: ','
      scope: punctuation.separator.haskell

  # import GHC.Exts (IsList (Item, fromList))
  #                          ^^^^^^^^^^^^^^
  import_list_type_members:
    - meta_scope: meta.import.type_members.haskell
    - match: \)
      scope: punctuation.section.parens.end.haskell
      pop: true
    - match: '{{upper_ident}}'
      scope: variable.function.constructor.haskell
    - match: '{{lower_ident}}'
      scope: variable.function.haskell
    - match: ','
      scope: punctuation.separator.haskell
    - match: \({{operator_con}}\)
      scope: keyword.operator.constructor.haskell
    - match: \({{operator}}\)
      scope: keyword.operator.haskell #variable.other.import.operator.haskell

  ### Data types ###

  data_type:
    - match: '^({{INDENTATION}})(data|newtype){{post_non_ident}}'
      captures:
        2: keyword.control.type.haskell
      push: data_type_declaration
    - match: '^({{INDENTATION}})(type){{post_non_ident}}'
      captures:
        2: keyword.control.type.haskell
      push: data_type_alias_declaration

  data_type_declaration:
    - include: pop_when_deindent
    - match: '{{upper_ident}}'
      scope: storage.type.haskell
      set:
        - include: data_type_declaration_typevars
        - match: '='
          scope: keyword.control.definition.haskell
          branch_point: data_type_declaration
          branch:
            - data_type_constructor_start_existential
            - data_type_constructor_start
        # TODO: GADTs

  data_type_declaration_typevars:
    - include: pop_when_deindent
    - match: '{{lower_ident}}'
      scope: variable.other.type.haskell
    - match: '\('
      scope: punctuation.section.parens.begin.haskell keyword.other.type.haskell
      push:
        - match: '\)'
          scope: punctuation.section.parens.end.haskell keyword.other.type.haskell
          pop: true
        - include: data_type_declaration_typevars
        - match: '::'
          scope: keyword.control.kind_annotation.haskell
          set:
            - match: '\)'
              scope: punctuation.section.parens.end.haskell keyword.other.type.haskell
              pop: true
            - match: '{{lower_ident}}'
              scope: variable.other.type.haskell
            - match: '{{upper_ident}}'
              scope: storage.type.haskell

  data_type_constructor_start_existential:
    - include: pop_when_deindent
    - match: '\bforall{{post_non_ident}}'
      scope: keyword.control.forall.haskell
      set:
        - include: pop_when_deindent
        - match: '\.'
          scope: keyword.control.forall.haskell
          branch_point: data_type_constructor
          branch:
            - data_type_constructor_start
            - data_type_constructor_start_existential_constraints
        - include: type_forall
    - match: '\S'
      fail: data_type_declaration

  data_type_constructor_start_existential_constraints:
    - include: pop_when_deindent
    - match: '=>'
      scope: keyword.operator.type.haskell
      set: data_type_constructor_start
    - include: type

  data_type_constructor_start:
    - include: pop_when_deindent
    - match: '{{upper_ident}}'
      scope: entity.name.constructor.haskell
      set: data_type_constructor

  data_type_constructor:
    - include: pop_when_deindent
    - match: '=>'
      fail: data_type_constructor
    - match: \|
      scope: keyword.control.definition.haskell
      set: data_type_constructor_start
    - match: \{
      scope: punctuation.section.record.begin.haskell
      push: data_type_record
    - include: type
    # TODO: deriving

  data_type_record:
    - meta_scope: meta.datatype.record.haskell
    - match: '{{lower_ident}}'
      scope: variable.other.member.haskell
    - match: '::'
      scope: keyword.declaration.haskell
      set: data_type_record_type

  data_type_record_type:
    - match: ','
      scope: punctuation.separator.record.haskell
      set: data_type_record
    - match: \}
      scope: punctuation.section.record.end.haskell
      pop: true
    - include: type

  data_type_alias_declaration:
    - include: pop_when_deindent
    - include: type
    - match: '='
      scope: keyword.control.definition.haskell

  ### Functions ###

  function:
    - match: '^(?=\s*\S)'
      branch_point: function
      branch:
        # try signature first, since it's easier to check if it fails
        # (nothing can go between the identifier and the '::')
        - function_signature
        - function_definition
        - operator_definition

  function_definition:
    - match: '^({{INDENTATION}})({{lower_ident}}|\({{operator}}\))'
      captures:
        2: entity.name.function.haskell
      set: function_definition_params

  function_definition_params_base:
    - include: pop_when_deindent
    - match: '='
      scope: keyword.other.function.definition.haskell
      set: function_definition_body
    - include: pattern_match

  function_definition_params:
    - meta_content_scope: |-
        meta.function.parameters.haskell
        meta.pattern.haskell
    - include: function_definition_params_base
    - match: '{{operator}}'
      fail: function

  function_definition_body:
    - include: pop_when_deindent
    # TODO: where clause
    - include: expression

  function_signature:
    - match: '^({{INDENTATION}})'
      set: function_signature_start

  function_signature_start:
    - include: pop_when_deindent
    - match: '{{lower_ident}}'
      scope: variable.function.signature.haskell
      set: function_signature_sep
    - match: '\({{operator}}\)'
      scope: variable.function.signature.haskell
      set: function_signature_sep
    - match: '\S'
      fail: function

  function_signature_sep:
    - include: pop_when_deindent
    - match: ','
      scope: punctuation.separator.signature.haskell
      set: function_signature_start
    - match: '::'
      scope: keyword.other.function.signature.haskell
      set: function_signature_type
    - match: '\S'
      fail: function

  function_signature_type:
    - include: pop_when_deindent
    - include: type

  operator_definition:
    - match: '^({{INDENTATION}})'
      set: operator_definition_params

  operator_definition_params:
    - meta_content_scope: |-
        meta.function.parameters.haskell
        meta.pattern.haskell
    - include: function_definition_params_base
    - match: '{{operator}}'
      scope: entity.name.function.haskell

  ### Expressions ###

  expression:
    - # https://forum.sublimetext.com/t/including-context-in-prototype-context-disables-prototype-everywhere/61039
      include: prototype
    - include: expression_numeric
    - match: |-
        '.'|'(\\.|\\o[0-7]+|\\x[0-9a-f]+)'
      scope: string.quoted.single.haskell
      captures:
        1: constant.character.escape.haskell
    - match: '"'
      push: expression_string_body
    - match: '::'
      scope: keyword.control.type_annotation.haskell
      push:
        - match: '(?=$|<-)'
          pop: true
        - include: type
    - match: '\$\('
      scope: punctuation.section.th_splice.begin.haskell
      push: expression_th_splice_body
    - include: expression_let_statement
    # TODO: parse case-statements with pattern matching
    # TODO: lambdas with pattern matching
    - match: |-
        (?x)
          (
              in
            | case
            | of
            | do
            | if
            | then
            | else
          )
          {{post_non_ident}}
      scope: keyword.control.haskell
    - # identifiers that are keywords when certain extensions are enabled
      match: |-
        (?x)
          (
              mdo
            | rec
          )
          {{post_non_ident}}
      scope: keyword.control.extension_dependent.haskell
    - match: (error|undefined)(?=[^\w'])
      scope: variable.other.error.haskell
    # possibly qualified operators
    - match: '{{module_prefix}}{{operator_con}}'
      scope: keyword.operator.constructor.haskell
    - match: '\({{module_prefix}}{{operator_con}}\)'
      scope: keyword.operator.constructor.prefix.haskell
    - match: '{{module_prefix}}{{operator}}'
      scope: keyword.operator.haskell
    - match: '\({{module_prefix}}{{operator}}\)'
      scope: keyword.operator.prefix.haskell
    # possibly qualified values/functions
    - match: '({{module_prefix}})({{lower_ident}})'
      captures:
        1: storage.module.haskell
        3: variable.other.haskell
    - match: '`{{module_prefix}}({{lower_ident}})`'
      scope: variable.other.infix.haskell
    # possibly qualified types/constructors
    - match: '({{module_prefix}})({{upper_ident}})'
      captures:
        1: storage.module.haskell
        3: variable.function.constructor.haskell
    - match: '`{{module_prefix}}({{upper_ident}})`'
      scope: variable.function.constructor.infix.haskell
    # possibly qualified quoted TH Names
    - match: |-
        '{{module_prefix}}{{lower_ident}}
      scope: variable.other.constant.name.haskell
    - match: |-
        '\({{module_prefix}}{{operator}}\)
      scope: variable.other.constant.name.haskell
    - match: |-
        '{{module_prefix}}{{upper_ident}}
      scope: variable.other.constant.name.constructor.haskell
    - match: |-
        '\({{module_prefix}}{{operator_con}}\)
      scope: variable.other.constant.name.constructor.haskell
    - match: |-
        ''{{module_prefix}}{{upper_ident}}
      scope: variable.other.constant.name.type.haskell
    - match: |-
        ''\({{module_prefix}}{{operator}}\)
      scope: variable.other.constant.name.type.haskell
    # tuples + lists
    - match: '\(,*\)'
      scope: keyword.operator.constructor.prefix.haskell
    - include: expression_quasiquote
    - match: '\['
      scope: punctuation.section.list.begin.haskell
      push: expression_list_body
    - # pretend like all parenthetical groups are tuples
      # a non-tuple like `(f x)` can still be thought of
      # as a tuple of one element
      match: '\('
      scope: punctuation.section.tuple.begin.haskell
      push: expression_tuple_body
    # TODO: record constructions

  expression_let_statement:
    - match: '\blet{{post_non_ident}}'
      scope: keyword.control.haskell
      set:
        - match: '='
          scope: keyword.operator.haskell
          set:
            - match: '(?=,|\])'
              pop: true
            - include: expression
        - meta_scope: meta.pattern.haskell
        - include: pattern_match
    # TODO: multi expression statement

  expression_string_body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.haskell
    - match: '\\.'
      scope: constant.character.escape.haskell
    - match: '"'
      pop: true

  expression_th_splice_body:
    - include: expression
    - match: '\)'
      scope: punctuation.section.th_splice.end.haskell
      pop: true

  expression_list_body:
    - match: ','
      scope: punctuation.separator.list.haskell
    - match: '(?=\|)'
      set: expression_list_comprehension
    - match: '\]'
      scope: punctuation.section.list.end.haskell
      pop: true
    - match: '::'
      scope: keyword.control.type_annotation.haskell
      push:
        - match: '(?=,|\])'
          pop: true
        - include: type
    - include: expression

  expression_list_comprehension:
    - match: ',|\|'
      scope: punctuation.separator.list.haskell
      branch_point: list_comprehension
      branch:
        - expression_list_comprehension_let
        - expression_list_comprehension_expr
        - expression_list_comprehension_bind
    - match: '\]'
      scope: punctuation.section.list.end.haskell
      pop: true

  expression_list_comprehension_let:
    - include: expression_let_statement
    - match: '\S'
      fail: list_comprehension

  expression_list_comprehension_expr:
    - match: '<-'
      fail: list_comprehension
    - match: '(?=,|\])'
      pop: true
    - include: expression

  expression_list_comprehension_bind:
    - match: '<-'
      scope: keyword.operator.haskell
      set:
        - match: '(?=,|\])'
          pop: true
        - include: expression
    - meta_scope: meta.pattern.haskell
    - include: pattern_match

  expression_tuple_body:
    - match: ','
      scope: punctuation.separator.tuple.haskell
    - match: '\)'
      scope: punctuation.section.tuple.end.haskell
      pop: true
    - match: '::'
      scope: keyword.control.type_annotation.haskell
      push:
        - match: '(?=,|\))'
          pop: true
        - include: type
    - include: expression

  expression_numeric:
    - match: '((?<=\s)-)?\d+\.\d+(e-?\d+)?'
      scope: constant.numeric.float.haskell
    - match: '((?<=\s)-)?\d+e-?\d+'
      scope: constant.numeric.float.haskell
    - match: '((?<=\s)-)?0[bB][0-1]+'
      scope: constant.numeric.integer.binary.haskell
    - match: '((?<=\s)-)?0[oO][0-7]+'
      scope: constant.numeric.integer.octal.haskell
    - match: '((?<=\s)-)?0[xX][0-9a-f]+'
      scope: constant.numeric.integer.hexadecimal.haskell
    - match: '((?<=\s)-)?\d+'
      scope: constant.numeric.integer.decimal.haskell

  expression_quasiquote:
    - match: '\[e?\|'
      scope: punctuation.section.quasiquote.template_haskell.begin.haskell
      embed: expression
      embed_scope: meta.block.template_haskell.haskell
      escape: '\|\]'
      escape_captures:
        0: punctuation.section.quasiquote.template_haskell.end.haskell
    # TODO: [d|...|]
    # TODO: [t|...|]
    # TODO: [p|...|]
    - match: '\[{{module_prefix}}{{lower_ident}}\|'
      scope: punctuation.section.quasiquote.begin.haskell
      embed: expression_quasiquote_body
      embed_scope: string.quoted.quasiquote.haskell
      escape: '\|\]'
      escape_captures:
        0: punctuation.section.quasiquote.end.haskell

  expression_quasiquote_body:
    - meta_include_prototype: false

  ### Pattern matching ###

  pattern_match:
    - include: expression_numeric
    - match: '\b_{{post_non_ident}}'
      scope: keyword.other.wildcard.haskell
    - match: '{{lower_ident}}'
      scope: variable.other.haskell
    - match: '{{upper_ident}}'
      scope: variable.other.constructor.haskell
    - match: '`{{upper_ident}}`'
      scope: variable.other.constructor.haskell
    - match: '@'
      scope: keyword.other.as_pattern.haskell
    - match: '\('
      scope: punctuation.section.parens.begin.haskell
    - match: '\)'
      scope: punctuation.section.parens.end.haskell
    - match: '\{'
      scope: punctuation.section.braces.begin.haskell
      push: pattern_match_record
    - match: '{{operator_con}}'
      scope: keyword.operator.constructor.haskell

  pattern_match_record:
    - meta_scope: meta.pattern.record.haskell
    - match: '\}'
      scope: punctuation.section.braces.end.haskell
      pop: true
    - # Person{boss = Just _, ..} (RecordWildCards)
      #                       ^^
      match: \.\.
      scope: keyword.other.wildcard.record.haskell
    - match: ','
      scope: punctuation.separator.haskell
    - # Person{boss = Just Person{name = name}}
      #        ^^^^^^
      match: '({{lower_ident}})\s*(=)'
      captures:
        1: variable.other.member.haskell
        2: keyword.operator.assignment.haskell
      push: pattern_match_record_nested
    - # Person{boss} (NamedFieldPuns)
      #        ^^^^
      match: '{{lower_ident}}'
      scope: variable.other.haskell

  # Person{boss = Just Person{name = name}}
  #               ^^^^^^^^^^^^^^^^^^^^^^^^
  pattern_match_record_nested:
    - match: '(?=[,}])'
      pop: true
    - include: pattern_match

  ### Types ###

  type:
    - match: '->|=>'
      scope: keyword.operator.type.haskell
    - match: |-
        '?\[
      scope: |-
        punctuation.section.brackets.begin.haskell
        keyword.other.type.haskell
      push: type_list_body
    - match: |-
        '?\(
      scope: |-
        punctuation.section.parens.begin.haskell
        keyword.other.type.haskell
      push: type_tuple_body
    - match: '\bforall{{post_non_ident}}'
      scope: keyword.control.forall.haskell
      push: type_forall
    - match: '({{module_prefix}})({{upper_ident}})'
      captures:
        1: storage.module.haskell
        3: storage.type.haskell
    - match: '{{lower_ident}}'
      scope: variable.other.type.haskell

  type_forall:
    - match: '{{lower_ident}}'
      scope: variable.other.type.haskell
    - match: '\.'
      scope: keyword.control.forall.haskell
      pop: true
    - match: '\('
      scope: punctuation.section.parens.begin.haskell
      push:
        - match: '\)'
          scope: punctuation.section.parens.end.haskell
          pop: true
        - match: '{{lower_ident}}'
          scope: variable.other.type.haskell
        - match: '::'
          scope: keyword.control.kind_annotation.haskell
          set:
            - match: '\)'
              scope: punctuation.section.parens.end.haskell
              pop: true
            - match: '{{lower_ident}}'
              scope: variable.other.type.haskell
            - match: '{{upper_ident}}'
              scope: storage.type.haskell

  type_list_body:
    - match: '\]'
      scope: |-
        punctuation.section.brackets.end.haskell
        keyword.other.type.haskell
      pop: true
    - match: ','
      scope: punctuation.separator.type.list.haskell
    - include: type

  type_tuple_body:
    - match: '\)'
      scope: |-
        punctuation.section.parens.end.haskell
        keyword.other.type.haskell
      pop: true
    - match: ','
      scope: punctuation.separator.type.tuple.haskell
    - include: type

  ### Type classes, instances, and standalone deriving ###

  type_class:
    - match: '^({{INDENTATION}})(class|instance){{post_non_ident}}'
      captures:
        2: keyword.control.type.haskell
      push:
        - include: pop_when_deindent
        - match: '\b(where){{post_non_ident}}'
          captures:
            1: keyword.control.context.haskell
          set: type_class_body
        - include: type
    # TODO: standalone deriving
    # TODO: type families/instances

  type_class_body:
    - include: pop_when_deindent
    # TODO: Type/data families
    - include: function

  ### CPP ###

  cpp:
    - match: '#(if|elif|else|endif)\b'
      push:
        - meta_scope: meta.preprocessor.haskell
        - match: \n
          pop: true
